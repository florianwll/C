Hornerschema:
- work rekursive
- counter == anzahl
- rekursive(list[], anzahl, number, counter--)
- counter == 0{return only number}

array basic I:
- int *speicher = (int*) malloc(length * sizeof(int))
- wichtig immer auf (if speicher = NULL testen)
- und wichtig am Ende immer free(speicher)

permutation:
-   for(int a = 1; a <= 9; a++){ 
        zeiger = 0;
        while(zeiger < 9){
            if(array[zeiger] == a)
                break;
            zeiger ++;
        }
        if(array[zeiger] != a){
            printf("keine gÃ¼ltige Permutation\n");
            return 0;
        }
    }
    return 1;

josephus:
-   int round = 1, pos = (k - 1) % n;
    int perm[n];

    while (round <= n) {
        asc[pos] = 0;
        perm[pos] = round;
        if (round == n)
            break;
        for (int i = 0; i < k; i++) {
            while(asc[(pos+1) % n] == 0)
                pos = (pos+1) % n;
            pos = (pos+1) % n;
        }
        round++;
    }

permtest:
-   for (int i = 0; i < laenge; i++) {
        if (*(p+i) > laenge || *(p+i) < 1 || array[*(p+i)-1] == 0)
            return 0;
        array[*(p+i)-1] = 0;
    }

permtest with speicher:
-   for(int i = 1; i <= length; i++){
        for(int j = 0; j < length; j++){
            if(perm[j] <= 0 || perm[j] >length)
                return 0;
            if(perm[j] == i){
                //printf("%d + %d ist: %d == %d \n", *perm,  j, perm[j], i);
                break;
            }
            if(j == length-1)
                return 0; 
        }
    }

primzahlen bis 1000:
- void sieveOfEratosthenes(int limit) {
    bool *prime = (bool *)calloc(limit + 1, sizeof(bool));

    if (prime == NULL) {
        return;
    }
    for (int i = 2; i <= limit; i++) {
        prime[i] = true;
    }
    for (int p = 2; p * p <= limit; p++) {
        if (prime[p] == true) {
            for (int i = p * p; i <= limit; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= limit; p++) {
        if (prime[p])
            printf("%d ", p);
    }
    free(prime);
}

primfaktorzerlegung:
-   unsigned int number;
    scanf("%u", &number);
    printf("%u: ", number);
    for(int i = 2; i <= number; i++){
        while(number % i == 0){
            printf("%u ", i);
            number /= i;
        }
    }

